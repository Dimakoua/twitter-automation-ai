name: Deploy to VPS

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-22.04
    # Define the environment for secrets and variables.
    # This should be configured in your repository settings under Settings > Environments.
    environment: "PROD"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy files to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "."
          target: "~/projects/${{ vars.APP_NAME }}/"
          overwrite: true

      - name: Run remote commands on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # --- Environment Setup ---
            # Set environment variables for the application from GitHub Secrets.
            export GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            # Example for loading cookies from environment variables as configured in accounts.json
            export TRACKER_001_COOKIE='${{ secrets.TRACKER_001_COOKIE }}'

            # --- Application Deployment ---
            cd ~/projects/${{ vars.APP_NAME }}/

            # --- Stop Existing Processes ---
            echo "Stopping any running application processes..."

            # --- Setup Virtual Environment and Dependencies ---
            echo "Setting up Python virtual environment and installing dependencies..."
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            # --- Cron Job Setup ---
            # This approach uses cron to periodically run the scripts, ensuring they are "kept running".
            # main.py runs less frequently, while the queue publisher runs often.
            echo "Setting up cron jobs for the application..."
            APP_PATH=$(realpath ~/projects/${{ vars.APP_NAME }})
            PYTHON_EXEC="$APP_PATH/venv/bin/python"
            MAIN_SCRIPT="$APP_PATH/src/main.py"
            QUEUE_SCRIPT="$APP_PATH/src/publish_queue_messages.py"
            LOG_DIR="$APP_PATH/logs"
            mkdir -p $LOG_DIR

            # Define the cron jobs with a unique tag for easy management
            CRON_TAG="# TwitterAutomationAI:${{ vars.APP_NAME }}"
            CRON_JOB_QUEUE="*/5 * * * * cd $APP_PATH && $PYTHON_EXEC $QUEUE_SCRIPT >> $LOG_DIR/queue_publisher.log 2>&1 $CRON_TAG"

            # Remove old cron jobs for this app to prevent duplication on re-deployments
            (crontab -l 2>/dev/null | grep -v "$CRON_TAG" || true) | crontab -

            # Add the new cron jobs to the crontab
            (crontab -l 2>/dev/null; echo "$CRON_JOB_MAIN"; echo "$CRON_JOB_QUEUE") | crontab -

            echo "Deployment finished. Cron jobs configured to run the scripts periodically."
            echo "Current crontab entries:"
            crontab -l